function isNormalInteger(str){if(!(str=str.trim()))return!1;str=str.replace(/^0+/,"")||"0";var n=Math.floor(Number(str));return n!==1/0&&String(n)===str&&0<=n}function update_group(){let final_group=document.querySelector("#final_group");if(0!=$("tr[id*=group]").length){let result=[];$("tr[id*=group]").each((idx,tr)=>{let group_type=$(`#${tr.id} td select`)[0],group_ids=$(`#${tr.id} td input`)[0];if(validate_type(group_type)&&validate_ids(group_ids)){let ids=[];const id_strs=group_ids.value.split(",");id_strs.filter(e=>e).forEach(element=>{ids.push(parseInt(element))}),group={type:group_type.value,ids:ids},v=validate_group(group),is_valid=v.is_valid,error=v.error,is_valid?(group_ids.classList.add("is-valid"),group_ids.classList.remove("is-invalid"),result.push(group)):(group_ids.classList.add("is-invalid"),group_ids.classList.remove("is-valid"),$(`#${tr.id} td input`)[0].nextElementSibling.innerHTML=error)}}),final_group.value=result}}function delete_group(id){let e=document.querySelector(`#group${id}`);e.remove(),update_group()}function validate_type(e){return["match","conflict","added"].includes(e.value)?(e.classList.add("is-valid"),e.classList.remove("is-invalid"),!0):(e.classList.add("is-invalid"),e.classList.remove("is-valid"),!1)}function validate_ids(e){if(!e.value)return e.classList.add("is-invalid"),e.classList.remove("is-valid"),!(e.nextElementSibling.innerHTML="Please fill the field with the correct pattern.");let ids=e.value.split(",");return ids.every(isNormalInteger)?(e.classList.add("is-valid"),e.classList.remove("is-invalid"),!0):(e.classList.add("is-invalid"),e.classList.remove("is-valid"),!1)}function validate_group(group){const recall_ids=Object.keys(record.recalled).map(e=>parseInt(e)),retold_ids=Object.keys(record.retold).map(e=>parseInt(e));var exist_in_recalled=group.ids.filter(value=>recall_ids.includes(value)),exist_in_retold=group.ids.filter(value=>retold_ids.includes(value));let error="",is_valid=!0;return exist_in_recalled.length+exist_in_retold.length!=group.ids.length?(is_valid=!1,error="contain invalid ids"):(exist_in_recalled=0!=exist_in_recalled.length,exist_in_retold=0!=exist_in_retold.length,"match"==group.type||"conflict"==group.type?exist_in_recalled&&exist_in_retold||(is_valid=!1,error=`"${group.type}" group must contain some recalled span ids and some retold span ids`):"add"==group.type&&(!exist_in_recalled&&exist_in_retold||(is_valid=!1,error='"add" group must only contain some retold span ids'))),{error:error,is_valid:is_valid}}function add_group(){let table=document.querySelector("#group_table"),tr=document.createElement("tr");tr.id=`group${group_counter}`,tr.innerHTML=`<td></td><td><div class="input-group has-validation"><select class="form-select" name="${group_counter}_type" onchange="update_group()"><option disabled selected>--</option><option value="match">Match</option><option value="conflict">Conflict</option><option value="added">Added</option></select><div class="invalid-feedback">Please select a valid type.</div></div></td><td><div class="input-group has-validation"><input type="text" class="form-control" required name="${group_counter}_ids"pattern="^\d+(,\d+)*$" onchange="update_group()"placeholder="Pleas separate the ids by a comma(,), ex: 1,2,5"><div class="invalid-feedback">Please fill the field with the correct pattern.</div></div></td><td><button type="button" class="btn btn-sm btn-danger" style="background-color: #dc3545"onclick=delete_group(${group_counter})>X</button></td>`,table.appendChild(tr),group_counter+=1}group_counter=1,$(document).ready(()=>{add_group(),update_group()});